Traceback (most recent call last):
  File "/home/khanh/miniconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/khanh/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/khanh/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/khanh/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/khanh/miniconda3/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/khanh/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/home/khanh/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/khanh/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
from sklearn.datasets import make_blobs


class KMeans():
  def __init__(self, k, max_iteration=10):
      self.k = k
      self.max_iteration = max_iteration
      self.all_centroids = []
      self.all_labels = []

  # H√†m thu·∫≠t to√°n k-Means l·∫•y ƒë·∫ßu v√†o l√† m·ªôt b·ªô d·ªØ li·ªáu v√† s·ªë l∆∞·ª£ng cluster k. Tr·∫ª v·ªÅ t√¢m c·ªßa k c·ª•m
  def fit(self, dataSet):
      # Kh·ªüi t·∫°o ng·∫´u nhi√™n k centroids
      numFeatures = dataSet.shape[1]
      centroids = self.get_random_centroids(numFeatures, self.k)
      self.all_centroids.append(centroids)
      self.all_labels.append(None)

      # Kh·ªüi t·∫°o c√°c bi·∫øn iterations, oldCentroids
      iterations = 0
      oldCentroids = None
      
      # V√≤ng l·∫∑p c·∫≠p nh·∫≠t centroids trong thu·∫≠t to√°n k-Means
      while not self.should_stop(oldCentroids, centroids, iterations):
          # L∆∞u l·∫°i centroids c≈© cho qu√° tr√¨nh ki·ªÉm tra h·ªôi t·ª•
          oldCentroids = centroids
          iterations += 1
          
          # G√°n nh√£n cho m·ªói di·ªÉm d·ªØ li·ªáu d·ª±a v√†o centroids
          labels = self.get_labels(dataSet, centroids)
          self.all_labels.append(labels)

          # C·∫≠p nh·∫≠t centroids d·ª±a v√†o nh√£n d·ªØ li·ªáu
          # print('0ld centroids: ', centroids)
          centroids = self.get_centroids(dataSet, labels, self.k)
          # print('new centroids: ', centroids)
          self.all_centroids.append(centroids)
  
      return centroids

  # H√†m kh·ªüi t·∫°o centroids ng·∫´u nhi√™n
  def get_random_centroids(self, numFeatures, k):
    return np.random.rand(k, numFeatures)
    # return np.array([[-5., -5.],
    #                  [4., 6.]])

  # H√†m n√†y tr·∫£ v·ªÅ nh√£n cho m·ªói ƒëi·ªÉm d·ªØ li·ªáu trong datasets
  def get_labels(self, dataSet, centroids):
      # V·ªõi m·ªói quan s√°t trong dataset, l·ª±a ch·ªçn centroids g·∫ßn nh·∫•t ƒë·ªÉ g√°n label cho d·ªØ li·ªáu.
      labels = []
      for x in dataSet:
        # T√≠nh kho·∫£ng c√°ch t·ªõi c√°c centroids v√† c·∫≠p nh·∫≠n nh√£n
        distances = np.sum((x-centroids)**2, axis=1)
        label = np.argmin(distances)
        labels.append(label)
      return labels
      
  # H√†m n√†y tr·∫£ v·ªÅ True ho·∫∑c False n·∫øu k-Means ho√†n th√†nh. ƒêi·ªÅu ki·ªán k-Means ho√†n th√†nh l√† 
  # thu·∫≠t to√°n v∆∞·ª£t ng∆∞·ª°ng s·ªë l∆∞·ª£ng v√≤ng l·∫∑p ho·∫∑c centroids ng·ª´ng thay ƒë·ªïi
  def should_stop(self, oldCentroids, centroids, iterations):
      if iterations > self.max_iteration: 
        return True
      return np.all(oldCentroids == centroids)

  # Tr·∫£ v·ªÅ toan ƒë·ªô m·ªõi cho k centroids c·ªßa m·ªói chi·ªÅu.
  def get_centroids(self, dataSet, labels, k):
      centroids = []
      for j in np.arange(k):
        # L·∫•y index cho m·ªói centroids
        idx_j = np.where(np.array(labels) == j)[0]
        centroid_j = dataSet[idx_j, :].mean(axis=0)
        centroids.append(centroid_j)
      return np.array(centroids)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m/tmp/ipykernel_76739/4271391530.py[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mdatasets[0m [0;32mimport[0m [0mmake_blobs[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;32mclass[0m [0mKMeans[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sklearn'
ModuleNotFoundError: No module named 'sklearn'

